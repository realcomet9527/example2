//-- AUTOGENERATED FILE -- 1627163531
#pragma once

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
  #define AUTO_EXTERN_C extern "C"
#else
  #define AUTO_EXTERN_C
#endif
#define ZIG_DECL AUTO_EXTERN_C
#define CPP_DECL AUTO_EXTERN_C
#define CPP_SIZE AUTO_EXTERN_C


#ifndef __cplusplus
 typedef struct JSC__RegExpPrototype JSC__RegExpPrototype; // JSC::RegExpPrototype
 typedef struct JSC__GeneratorPrototype JSC__GeneratorPrototype; // JSC::GeneratorPrototype
 typedef struct JSC__ArrayIteratorPrototype JSC__ArrayIteratorPrototype; // JSC::ArrayIteratorPrototype
 typedef struct JSC__StringPrototype JSC__StringPrototype; // JSC::StringPrototype
 typedef struct WTF__StringView WTF__StringView; // WTF::StringView
 typedef struct JSC__JSPromisePrototype JSC__JSPromisePrototype; // JSC::JSPromisePrototype
 typedef struct JSC__CatchScope JSC__CatchScope; // JSC::CatchScope
 typedef struct JSC__ThrowScope JSC__ThrowScope; // JSC::ThrowScope
 typedef struct JSC__PropertyName JSC__PropertyName; // JSC::PropertyName
 typedef struct JSC__JSObject JSC__JSObject; // JSC::JSObject
 typedef struct WTF__ExternalStringImpl WTF__ExternalStringImpl; // WTF::ExternalStringImpl
 typedef struct JSC__AsyncIteratorPrototype JSC__AsyncIteratorPrototype; // JSC::AsyncIteratorPrototype
 typedef struct WTF__StringImpl WTF__StringImpl; // WTF::StringImpl
 typedef struct JSC__JSLock JSC__JSLock; // JSC::JSLock
 typedef struct JSC__JSModuleLoader JSC__JSModuleLoader; // JSC::JSModuleLoader
 typedef struct JSC__VM JSC__VM; // JSC::VM
 typedef struct JSC__AsyncGeneratorPrototype JSC__AsyncGeneratorPrototype; // JSC::AsyncGeneratorPrototype
 typedef struct JSC__AsyncGeneratorFunctionPrototype JSC__AsyncGeneratorFunctionPrototype; // JSC::AsyncGeneratorFunctionPrototype
 typedef struct JSC__JSGlobalObject JSC__JSGlobalObject; // JSC::JSGlobalObject
 typedef struct Wundle__DefaultGlobal Wundle__DefaultGlobal; // Wundle::DefaultGlobal
 typedef struct JSC__JSFunction JSC__JSFunction; // JSC::JSFunction
 typedef struct JSC__ArrayPrototype JSC__ArrayPrototype; // JSC::ArrayPrototype
 typedef struct JSC__Identifier JSC__Identifier; // JSC::Identifier
 typedef struct JSC__JSPromise JSC__JSPromise; // JSC::JSPromise
 typedef struct JSC__AsyncFunctionPrototype JSC__AsyncFunctionPrototype; // JSC::AsyncFunctionPrototype
 typedef struct JSC__SetIteratorPrototype JSC__SetIteratorPrototype; // JSC::SetIteratorPrototype
 typedef struct JSC__SourceCode JSC__SourceCode; // JSC::SourceCode
 typedef struct JSC__JSCell JSC__JSCell; // JSC::JSCell
 typedef struct JSC__BigIntPrototype JSC__BigIntPrototype; // JSC::BigIntPrototype
 typedef struct JSC__GeneratorFunctionPrototype JSC__GeneratorFunctionPrototype; // JSC::GeneratorFunctionPrototype
 typedef struct JSC__SourceOrigin JSC__SourceOrigin; // JSC::SourceOrigin
 typedef struct JSC__JSModuleRecord JSC__JSModuleRecord; // JSC::JSModuleRecord
 typedef struct WTF__String WTF__String; // WTF::String
 typedef struct WTF__URL WTF__URL; // WTF::URL
  typedef int64_t JSC__JSValue;
 typedef struct JSC__IteratorPrototype JSC__IteratorPrototype; // JSC::IteratorPrototype
 typedef struct JSC__JSInternalPromise JSC__JSInternalPromise; // JSC::JSInternalPromise
 typedef struct JSC__FunctionPrototype JSC__FunctionPrototype; // JSC::FunctionPrototype
 typedef struct Inspector__ScriptArguments Inspector__ScriptArguments; // Inspector::ScriptArguments
 typedef struct JSC__Exception JSC__Exception; // JSC::Exception
 typedef struct JSC__JSString JSC__JSString; // JSC::JSString
 typedef struct Zig__ConsoleClient Zig__ConsoleClient; // Zig::ConsoleClient
 typedef struct JSC__ObjectPrototype JSC__ObjectPrototype; // JSC::ObjectPrototype
 typedef struct JSC__CallFrame JSC__CallFrame; // JSC::CallFrame
 typedef struct JSC__MapIteratorPrototype JSC__MapIteratorPrototype; // JSC::MapIteratorPrototype

#endif
 typedef struct bJSC__JSModuleRecord { char bytes[344]; } bJSC__JSModuleRecord;
 typedef struct bJSC__ThrowScope { char bytes[8]; } bJSC__ThrowScope;
 typedef struct bJSC__PropertyName { char bytes[8]; } bJSC__PropertyName;
 typedef struct bJSC__CallFrame { char bytes[8]; } bJSC__CallFrame;
 typedef struct bJSC__CatchScope { char bytes[8]; } bJSC__CatchScope;
 typedef struct bWTF__String { char bytes[8]; } bWTF__String;
 typedef struct bWTF__StringView { char bytes[24]; } bWTF__StringView;
 typedef struct bJSC__JSModuleLoader { char bytes[16]; } bJSC__JSModuleLoader;
 typedef struct bJSC__SourceOrigin { char bytes[48]; } bJSC__SourceOrigin;
 typedef struct bJSC__VM { char bytes[49080]; } bJSC__VM;
 typedef struct bJSC__JSString { char bytes[16]; } bJSC__JSString;
 typedef struct bJSC__Exception { char bytes[40]; } bJSC__Exception;
 typedef struct bWTF__ExternalStringImpl { char bytes[32]; } bWTF__ExternalStringImpl;
 typedef struct bWTF__StringImpl { char bytes[24]; } bWTF__StringImpl;
 typedef struct bJSC__SourceCode { char bytes[24]; } bJSC__SourceCode;
 typedef struct bJSC__JSPromise { char bytes[32]; } bJSC__JSPromise;
 typedef struct bWTF__URL { char bytes[40]; } bWTF__URL;
 typedef struct bJSC__JSFunction { char bytes[32]; } bJSC__JSFunction;
 typedef struct bJSC__JSGlobalObject { char bytes[2464]; } bJSC__JSGlobalObject;
 typedef struct bJSC__JSCell { char bytes[8]; } bJSC__JSCell;
 typedef struct bJSC__JSLock { char bytes[40]; } bJSC__JSLock;
 typedef struct bInspector__ScriptArguments { char bytes[32]; } bInspector__ScriptArguments;
 typedef struct bWundle__DefaultGlobal { char bytes[2464]; } bWundle__DefaultGlobal;
 typedef struct bJSC__JSInternalPromise { char bytes[32]; } bJSC__JSInternalPromise;
 typedef struct bJSC__JSObject { char bytes[16]; } bJSC__JSObject;
 typedef struct bJSC__Identifier { char bytes[8]; } bJSC__Identifier;

#ifdef __cplusplus
  namespace JSC {
    class JSCell;
    class Exception;
    class StringPrototype;
    class JSPromisePrototype;
    class GeneratorFunctionPrototype;
    class ArrayPrototype;
    class JSString;
    class JSObject;
    class AsyncIteratorPrototype;
    class AsyncGeneratorFunctionPrototype;
    class Identifier;
    class JSPromise;
    class RegExpPrototype;
    class AsyncFunctionPrototype;
    class CatchScope;
    class VM;
    class BigIntPrototype;
    class SetIteratorPrototype;
    class ThrowScope;
    class SourceOrigin;
    class AsyncGeneratorPrototype;
    class PropertyName;
    class MapIteratorPrototype;
    class JSModuleRecord;
    class JSInternalPromise;
    class ArrayIteratorPrototype;
    class JSFunction;
    class JSModuleLoader;
    class GeneratorPrototype;
    class JSGlobalObject;
    class SourceCode;
    class JSLock;
    class FunctionPrototype;
    class IteratorPrototype;
    class CallFrame;
    class ObjectPrototype;
  }
  namespace WTF {
    class URL;
    class StringImpl;
    class String;
    class StringView;
    class ExternalStringImpl;
  }
  namespace Wundle {
    class DefaultGlobal;
  }
  namespace Inspector {
    class ScriptArguments;
  }
  namespace Zig {
    class ConsoleClient;
  }

  typedef int64_t JSC__JSValue;
  using JSC__JSCell = JSC::JSCell;
  using JSC__Exception = JSC::Exception;
  using JSC__StringPrototype = JSC::StringPrototype;
  using JSC__JSPromisePrototype = JSC::JSPromisePrototype;
  using JSC__GeneratorFunctionPrototype = JSC::GeneratorFunctionPrototype;
  using JSC__ArrayPrototype = JSC::ArrayPrototype;
  using JSC__JSString = JSC::JSString;
  using JSC__JSObject = JSC::JSObject;
  using JSC__AsyncIteratorPrototype = JSC::AsyncIteratorPrototype;
  using JSC__AsyncGeneratorFunctionPrototype = JSC::AsyncGeneratorFunctionPrototype;
  using JSC__Identifier = JSC::Identifier;
  using JSC__JSPromise = JSC::JSPromise;
  using JSC__RegExpPrototype = JSC::RegExpPrototype;
  using JSC__AsyncFunctionPrototype = JSC::AsyncFunctionPrototype;
  using JSC__CatchScope = JSC::CatchScope;
  using JSC__VM = JSC::VM;
  using JSC__BigIntPrototype = JSC::BigIntPrototype;
  using JSC__SetIteratorPrototype = JSC::SetIteratorPrototype;
  using JSC__ThrowScope = JSC::ThrowScope;
  using JSC__SourceOrigin = JSC::SourceOrigin;
  using JSC__AsyncGeneratorPrototype = JSC::AsyncGeneratorPrototype;
  using JSC__PropertyName = JSC::PropertyName;
  using JSC__MapIteratorPrototype = JSC::MapIteratorPrototype;
  using JSC__JSModuleRecord = JSC::JSModuleRecord;
  using JSC__JSInternalPromise = JSC::JSInternalPromise;
  using JSC__ArrayIteratorPrototype = JSC::ArrayIteratorPrototype;
  using JSC__JSFunction = JSC::JSFunction;
  using JSC__JSModuleLoader = JSC::JSModuleLoader;
  using JSC__GeneratorPrototype = JSC::GeneratorPrototype;
  using JSC__JSGlobalObject = JSC::JSGlobalObject;
  using JSC__SourceCode = JSC::SourceCode;
  using JSC__JSLock = JSC::JSLock;
  using JSC__FunctionPrototype = JSC::FunctionPrototype;
  using JSC__IteratorPrototype = JSC::IteratorPrototype;
  using JSC__CallFrame = JSC::CallFrame;
  using JSC__ObjectPrototype = JSC::ObjectPrototype;
  using WTF__URL = WTF::URL;
  using WTF__StringImpl = WTF::StringImpl;
  using WTF__String = WTF::String;
  using WTF__StringView = WTF::StringView;
  using WTF__ExternalStringImpl = WTF::ExternalStringImpl;
  using Wundle__DefaultGlobal = Wundle::DefaultGlobal;
  using Inspector__ScriptArguments = Inspector::ScriptArguments;
  using Zig__ConsoleClient = Zig::ConsoleClient;

#endif


#pragma mark - JSC::JSObject

CPP_DECL size_t JSC__JSObject__getArrayLength(JSC__JSObject* arg0);
CPP_DECL JSC__JSValue JSC__JSObject__getAtIndex(JSC__JSObject* arg0, JSC__JSGlobalObject* arg1, JSC__PropertyName* arg2, uint32_t arg3);
CPP_DECL bool JSC__JSObject__putAtIndex(JSC__JSObject* arg0, JSC__JSGlobalObject* arg1, JSC__PropertyName* arg2, uint32_t arg3);

#pragma mark - JSC::JSCell

CPP_DECL JSC__JSObject* JSC__JSCell__getObject(JSC__JSCell* arg0);
CPP_DECL bWTF__String JSC__JSCell__getString(JSC__JSCell* arg0, JSC__JSGlobalObject* arg1);
CPP_DECL char JSC__JSCell__getType(JSC__JSCell* arg0);

#pragma mark - JSC::JSString

CPP_DECL JSC__JSString* JSC__JSString__createFromOwnedString(JSC__VM* arg0, const WTF__String* arg1);
CPP_DECL JSC__JSString* JSC__JSString__createFromString(JSC__VM* arg0, const WTF__String* arg1);
CPP_DECL bool JSC__JSString__eql(const JSC__JSString* arg0, JSC__JSGlobalObject* arg1, JSC__JSString* arg2);
CPP_DECL bool JSC__JSString__is8Bit(const JSC__JSString* arg0);
CPP_DECL size_t JSC__JSString__length(const JSC__JSString* arg0);
CPP_DECL JSC__JSObject* JSC__JSString__toObject(JSC__JSString* arg0, JSC__JSGlobalObject* arg1);
CPP_DECL bWTF__String JSC__JSString__value(JSC__JSString* arg0, JSC__JSGlobalObject* arg1);

#pragma mark - Inspector::ScriptArguments

CPP_DECL JSC__JSValue Inspector__ScriptArguments__argumentAt(const Inspector__ScriptArguments* arg0, size_t arg1);
CPP_DECL size_t Inspector__ScriptArguments__argumentCount(const Inspector__ScriptArguments* arg0);
CPP_DECL bWTF__String Inspector__ScriptArguments__getFirstArgumentAsString(const Inspector__ScriptArguments* arg0);
CPP_DECL bool Inspector__ScriptArguments__isEqual(const Inspector__ScriptArguments* arg0, const Inspector__ScriptArguments* arg1);
CPP_DECL void Inspector__ScriptArguments__release(Inspector__ScriptArguments* arg0);

#pragma mark - Zig::GlobalObject

CPP_DECL JSC__JSGlobalObject* Zig__GlobalObject__create(JSC__VM* arg0, Zig__ConsoleClient* arg1);
ZIG_DECL JSC__JSValue Zig__GlobalObject__createImportMetaProperties(JSC__JSGlobalObject* arg0, JSC__JSModuleLoader* arg1, JSC__JSValue JSValue2, JSC__JSModuleRecord* arg3, JSC__JSValue JSValue4);
ZIG_DECL JSC__JSValue Zig__GlobalObject__eval(JSC__JSGlobalObject* arg0, JSC__JSModuleLoader* arg1, JSC__JSValue JSValue2, JSC__JSValue JSValue3, JSC__JSValue JSValue4, JSC__JSValue JSValue5, JSC__JSValue JSValue6);
ZIG_DECL JSC__JSInternalPromise* Zig__GlobalObject__fetch(JSC__JSGlobalObject* arg0, JSC__JSModuleLoader* arg1, JSC__JSValue JSValue2, JSC__JSValue JSValue3, JSC__JSValue JSValue4);
ZIG_DECL JSC__JSInternalPromise* Zig__GlobalObject__import(JSC__JSGlobalObject* arg0, JSC__JSModuleLoader* arg1, JSC__JSString* arg2, JSC__JSValue JSValue3, const JSC__SourceOrigin* arg4);
ZIG_DECL JSC__JSValue Zig__GlobalObject__promiseRejectionTracker(JSC__JSGlobalObject* arg0, JSC__JSPromise* arg1, uint32_t JSPromiseRejectionOperation2);
ZIG_DECL JSC__JSValue Zig__GlobalObject__reportUncaughtException(JSC__JSGlobalObject* arg0, JSC__Exception* arg1);
ZIG_DECL bJSC__Identifier Zig__GlobalObject__resolve(JSC__JSGlobalObject* arg0, JSC__JSModuleLoader* arg1, JSC__JSValue JSValue2, JSC__JSValue JSValue3, const JSC__SourceOrigin* arg4);

#pragma mark - Zig::ConsoleClient

ZIG_DECL void Zig__ConsoleClient__count(JSC__JSGlobalObject* arg0, const char* arg1, size_t arg2);
ZIG_DECL void Zig__ConsoleClient__countReset(JSC__JSGlobalObject* arg0, const char* arg1, size_t arg2);
ZIG_DECL void Zig__ConsoleClient__messageWithTypeAndLevel(uint32_t arg0, uint32_t arg1, JSC__JSGlobalObject* arg2, Inspector__ScriptArguments* arg3);
ZIG_DECL void Zig__ConsoleClient__profile(JSC__JSGlobalObject* arg0, const char* arg1, size_t arg2);
ZIG_DECL void Zig__ConsoleClient__profileEnd(JSC__JSGlobalObject* arg0, const char* arg1, size_t arg2);
ZIG_DECL void Zig__ConsoleClient__record(JSC__JSGlobalObject* arg0, Inspector__ScriptArguments* arg1);
ZIG_DECL void Zig__ConsoleClient__recordEnd(JSC__JSGlobalObject* arg0, Inspector__ScriptArguments* arg1);
ZIG_DECL void Zig__ConsoleClient__screenshot(JSC__JSGlobalObject* arg0, Inspector__ScriptArguments* arg1);
ZIG_DECL void Zig__ConsoleClient__takeHeapSnapshot(JSC__JSGlobalObject* arg0, const char* arg1, size_t arg2);
ZIG_DECL void Zig__ConsoleClient__time(JSC__JSGlobalObject* arg0, const char* arg1, size_t arg2);
ZIG_DECL void Zig__ConsoleClient__timeEnd(JSC__JSGlobalObject* arg0, const char* arg1, size_t arg2);
ZIG_DECL void Zig__ConsoleClient__timeLog(JSC__JSGlobalObject* arg0, const char* arg1, size_t arg2, Inspector__ScriptArguments* arg3);
ZIG_DECL void Zig__ConsoleClient__timeStamp(JSC__JSGlobalObject* arg0, Inspector__ScriptArguments* arg1);

#pragma mark - Wundle::DefaultGlobal

CPP_DECL Wundle__DefaultGlobal* Wundle__DefaultGlobal__create(Wundle__DefaultGlobal* arg0, void* arg1);
CPP_DECL void* Wundle__DefaultGlobal__getWrapper(Wundle__DefaultGlobal* arg0);

#pragma mark - JSC::JSModuleLoader

CPP_DECL bool JSC__JSModuleLoader__checkSyntax(JSC__JSGlobalObject* arg0, const JSC__SourceCode* arg1, bool arg2);
CPP_DECL JSC__JSValue JSC__JSModuleLoader__dependencyKeysIfEvaluated(JSC__JSModuleLoader* arg0, JSC__JSGlobalObject* arg1, JSC__JSModuleRecord* arg2);
CPP_DECL JSC__JSValue JSC__JSModuleLoader__evaluate(JSC__JSGlobalObject* arg0, const JSC__SourceCode* arg1, JSC__JSValue JSValue2, JSC__Exception** arg3);
CPP_DECL JSC__JSInternalPromise* JSC__JSModuleLoader__importModule(JSC__JSGlobalObject* arg0, const JSC__Identifier* arg1);
CPP_DECL JSC__JSValue JSC__JSModuleLoader__linkAndEvaluateModule(JSC__JSGlobalObject* arg0, const JSC__Identifier* arg1);
CPP_DECL JSC__JSInternalPromise* JSC__JSModuleLoader__loadAndEvaluateModule(JSC__JSGlobalObject* arg0, const WTF__String* arg1);
CPP_DECL JSC__JSInternalPromise* JSC__JSModuleLoader__loadAndEvaluateModuleEntryPoint(JSC__JSGlobalObject* arg0, const JSC__SourceCode* arg1);

#pragma mark - JSC::JSModuleRecord

CPP_DECL bJSC__SourceCode JSC__JSModuleRecord__sourceCode(JSC__JSModuleRecord* arg0);

#pragma mark - JSC::JSPromise

CPP_DECL bool JSC__JSPromise__isHandled(const JSC__JSPromise* arg0, JSC__VM* arg1);
CPP_DECL void JSC__JSPromise__reject(JSC__JSPromise* arg0, JSC__JSGlobalObject* arg1, JSC__JSValue JSValue2);
CPP_DECL void JSC__JSPromise__rejectAsHandled(JSC__JSPromise* arg0, JSC__JSGlobalObject* arg1, JSC__JSValue JSValue2);
CPP_DECL void JSC__JSPromise__rejectAsHandledException(JSC__JSPromise* arg0, JSC__JSGlobalObject* arg1, JSC__Exception* arg2);
CPP_DECL JSC__JSPromise* JSC__JSPromise__rejectedPromise(JSC__JSGlobalObject* arg0, JSC__JSValue JSValue1);
CPP_DECL void JSC__JSPromise__rejectException(JSC__JSPromise* arg0, JSC__JSGlobalObject* arg1, JSC__Exception* arg2);
CPP_DECL void JSC__JSPromise__rejectWithCaughtException(JSC__JSPromise* arg0, JSC__JSGlobalObject* arg1, bJSC__ThrowScope arg2);
CPP_DECL void JSC__JSPromise__resolve(JSC__JSPromise* arg0, JSC__JSGlobalObject* arg1, JSC__JSValue JSValue2);
CPP_DECL JSC__JSPromise* JSC__JSPromise__resolvedPromise(JSC__JSGlobalObject* arg0, JSC__JSValue JSValue1);
CPP_DECL JSC__JSValue JSC__JSPromise__result(const JSC__JSPromise* arg0, JSC__VM* arg1);
CPP_DECL uint32_t JSC__JSPromise__status(const JSC__JSPromise* arg0, JSC__VM* arg1);

#pragma mark - JSC::JSInternalPromise

CPP_DECL JSC__JSInternalPromise* JSC__JSInternalPromise__create(JSC__JSGlobalObject* arg0);
CPP_DECL bool JSC__JSInternalPromise__isHandled(const JSC__JSInternalPromise* arg0, JSC__VM* arg1);
CPP_DECL void JSC__JSInternalPromise__reject(JSC__JSInternalPromise* arg0, JSC__JSGlobalObject* arg1, JSC__JSValue JSValue2);
CPP_DECL void JSC__JSInternalPromise__rejectAsHandled(JSC__JSInternalPromise* arg0, JSC__JSGlobalObject* arg1, JSC__JSValue JSValue2);
CPP_DECL void JSC__JSInternalPromise__rejectAsHandledException(JSC__JSInternalPromise* arg0, JSC__JSGlobalObject* arg1, JSC__Exception* arg2);
CPP_DECL JSC__JSInternalPromise* JSC__JSInternalPromise__rejectedPromise(JSC__JSGlobalObject* arg0, JSC__JSValue JSValue1);
CPP_DECL void JSC__JSInternalPromise__rejectException(JSC__JSInternalPromise* arg0, JSC__JSGlobalObject* arg1, JSC__Exception* arg2);
CPP_DECL void JSC__JSInternalPromise__rejectWithCaughtException(JSC__JSInternalPromise* arg0, JSC__JSGlobalObject* arg1, bJSC__ThrowScope arg2);
CPP_DECL void JSC__JSInternalPromise__resolve(JSC__JSInternalPromise* arg0, JSC__JSGlobalObject* arg1, JSC__JSValue JSValue2);
CPP_DECL JSC__JSInternalPromise* JSC__JSInternalPromise__resolvedPromise(JSC__JSGlobalObject* arg0, JSC__JSValue JSValue1);
CPP_DECL JSC__JSValue JSC__JSInternalPromise__result(const JSC__JSInternalPromise* arg0, JSC__VM* arg1);
CPP_DECL uint32_t JSC__JSInternalPromise__status(const JSC__JSInternalPromise* arg0, JSC__VM* arg1);
CPP_DECL JSC__JSInternalPromise* JSC__JSInternalPromise__then(JSC__JSInternalPromise* arg0, JSC__JSGlobalObject* arg1, JSC__JSFunction* arg2, JSC__JSFunction* arg3);

#pragma mark - JSC::SourceOrigin

CPP_DECL bJSC__SourceOrigin JSC__SourceOrigin__fromURL(const WTF__URL* arg0);

#pragma mark - JSC::SourceCode

CPP_DECL bJSC__SourceCode JSC__SourceCode__fromString(const WTF__String* arg0, const JSC__SourceOrigin* arg1, WTF__String* arg2, char SourceType3);

#pragma mark - JSC::JSFunction

CPP_DECL bWTF__String JSC__JSFunction__calculatedDisplayName(JSC__JSFunction* arg0, JSC__VM* arg1);
CPP_DECL JSC__JSValue JSC__JSFunction__callWithArguments(JSC__JSValue JSValue0, JSC__JSGlobalObject* arg1, JSC__JSValue* arg2, size_t arg3, JSC__Exception** arg4, char* arg5);
CPP_DECL JSC__JSValue JSC__JSFunction__callWithArgumentsAndThis(JSC__JSValue JSValue0, JSC__JSValue JSValue1, JSC__JSGlobalObject* arg2, JSC__JSValue* arg3, size_t arg4, JSC__Exception** arg5, char* arg6);
CPP_DECL JSC__JSValue JSC__JSFunction__callWithoutAnyArgumentsOrThis(JSC__JSValue JSValue0, JSC__JSGlobalObject* arg1, JSC__Exception** arg2, char* arg3);
CPP_DECL JSC__JSValue JSC__JSFunction__callWithThis(JSC__JSValue JSValue0, JSC__JSGlobalObject* arg1, JSC__JSValue JSValue2, JSC__Exception** arg3, char* arg4);
CPP_DECL JSC__JSValue JSC__JSFunction__constructWithArguments(JSC__JSValue JSValue0, JSC__JSGlobalObject* arg1, JSC__JSValue* arg2, size_t arg3, JSC__Exception** arg4, char* arg5);
CPP_DECL JSC__JSValue JSC__JSFunction__constructWithArgumentsAndNewTarget(JSC__JSValue JSValue0, JSC__JSValue JSValue1, JSC__JSGlobalObject* arg2, JSC__JSValue* arg3, size_t arg4, JSC__Exception** arg5, char* arg6);
CPP_DECL JSC__JSValue JSC__JSFunction__constructWithNewTarget(JSC__JSValue JSValue0, JSC__JSGlobalObject* arg1, JSC__JSValue JSValue2, JSC__Exception** arg3, char* arg4);
CPP_DECL JSC__JSValue JSC__JSFunction__constructWithoutAnyArgumentsOrNewTarget(JSC__JSValue JSValue0, JSC__JSGlobalObject* arg1, JSC__Exception** arg2, char* arg3);
CPP_DECL JSC__JSFunction* JSC__JSFunction__createFromNative(JSC__JSGlobalObject* arg0, uint16_t arg1, const WTF__String* arg2, void* arg3, JSC__JSValue (* ArgFn4)(void* arg0, JSC__JSGlobalObject* arg1, JSC__CallFrame* arg2));
CPP_DECL JSC__JSFunction* JSC__JSFunction__createFromSourceCode(JSC__JSGlobalObject* arg0, const char* arg1, uint16_t arg2, JSC__JSValue* arg3, uint16_t arg4, const JSC__SourceCode* arg5, JSC__SourceOrigin* arg6, JSC__JSObject** arg7);
CPP_DECL bWTF__String JSC__JSFunction__displayName(JSC__JSFunction* arg0, JSC__VM* arg1);
CPP_DECL bWTF__String JSC__JSFunction__getName(JSC__JSFunction* arg0, JSC__VM* arg1);

#pragma mark - JSC::JSGlobalObject

CPP_DECL JSC__ArrayIteratorPrototype* JSC__JSGlobalObject__arrayIteratorPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__ArrayPrototype* JSC__JSGlobalObject__arrayPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__AsyncFunctionPrototype* JSC__JSGlobalObject__asyncFunctionPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__AsyncGeneratorFunctionPrototype* JSC__JSGlobalObject__asyncGeneratorFunctionPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__AsyncGeneratorPrototype* JSC__JSGlobalObject__asyncGeneratorPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__AsyncIteratorPrototype* JSC__JSGlobalObject__asyncIteratorPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__BigIntPrototype* JSC__JSGlobalObject__bigIntPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__JSObject* JSC__JSGlobalObject__booleanPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__JSObject* JSC__JSGlobalObject__createError(JSC__JSGlobalObject* arg0, char ErrorType1, WTF__String* arg2);
CPP_DECL JSC__JSObject* JSC__JSGlobalObject__datePrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__JSObject* JSC__JSGlobalObject__errorPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__FunctionPrototype* JSC__JSGlobalObject__functionPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__GeneratorFunctionPrototype* JSC__JSGlobalObject__generatorFunctionPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__GeneratorPrototype* JSC__JSGlobalObject__generatorPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__IteratorPrototype* JSC__JSGlobalObject__iteratorPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__JSObject* JSC__JSGlobalObject__jsSetPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__MapIteratorPrototype* JSC__JSGlobalObject__mapIteratorPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__JSObject* JSC__JSGlobalObject__mapPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__JSObject* JSC__JSGlobalObject__numberPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__ObjectPrototype* JSC__JSGlobalObject__objectPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__JSPromisePrototype* JSC__JSGlobalObject__promisePrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__RegExpPrototype* JSC__JSGlobalObject__regExpPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__SetIteratorPrototype* JSC__JSGlobalObject__setIteratorPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__StringPrototype* JSC__JSGlobalObject__stringPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__JSObject* JSC__JSGlobalObject__symbolPrototype(JSC__JSGlobalObject* arg0);
CPP_DECL JSC__JSObject* JSC__JSGlobalObject__throwError(JSC__JSGlobalObject* arg0, JSC__JSObject* arg1);
CPP_DECL JSC__VM* JSC__JSGlobalObject__vm(JSC__JSGlobalObject* arg0);

#pragma mark - WTF::URL

CPP_DECL bWTF__StringView WTF__URL__encodedPassword(WTF__URL* arg0);
CPP_DECL bWTF__StringView WTF__URL__encodedUser(WTF__URL* arg0);
CPP_DECL bWTF__String WTF__URL__fileSystemPath(WTF__URL* arg0);
CPP_DECL bWTF__StringView WTF__URL__fragmentIdentifier(WTF__URL* arg0);
CPP_DECL bWTF__StringView WTF__URL__fragmentIdentifierWithLeadingNumberSign(WTF__URL* arg0);
CPP_DECL bWTF__URL WTF__URL__fromFileSystemPath(bWTF__StringView arg0);
CPP_DECL bWTF__URL WTF__URL__fromString(bWTF__String arg0, bWTF__String arg1);
CPP_DECL bWTF__StringView WTF__URL__host(WTF__URL* arg0);
CPP_DECL bWTF__String WTF__URL__hostAndPort(WTF__URL* arg0);
CPP_DECL bool WTF__URL__isEmpty(const WTF__URL* arg0);
CPP_DECL bool WTF__URL__isValid(const WTF__URL* arg0);
CPP_DECL bWTF__StringView WTF__URL__lastPathComponent(WTF__URL* arg0);
CPP_DECL bWTF__String WTF__URL__password(WTF__URL* arg0);
CPP_DECL bWTF__StringView WTF__URL__path(WTF__URL* arg0);
CPP_DECL bWTF__StringView WTF__URL__protocol(WTF__URL* arg0);
CPP_DECL bWTF__String WTF__URL__protocolHostAndPort(WTF__URL* arg0);
CPP_DECL bWTF__StringView WTF__URL__query(WTF__URL* arg0);
CPP_DECL bWTF__StringView WTF__URL__queryWithLeadingQuestionMark(WTF__URL* arg0);
CPP_DECL void WTF__URL__setHost(WTF__URL* arg0, bWTF__StringView arg1);
CPP_DECL void WTF__URL__setHostAndPort(WTF__URL* arg0, bWTF__StringView arg1);
CPP_DECL void WTF__URL__setPassword(WTF__URL* arg0, bWTF__StringView arg1);
CPP_DECL void WTF__URL__setPath(WTF__URL* arg0, bWTF__StringView arg1);
CPP_DECL void WTF__URL__setProtocol(WTF__URL* arg0, bWTF__StringView arg1);
CPP_DECL void WTF__URL__setQuery(WTF__URL* arg0, bWTF__StringView arg1);
CPP_DECL void WTF__URL__setUser(WTF__URL* arg0, bWTF__StringView arg1);
CPP_DECL bWTF__String WTF__URL__stringWithoutFragmentIdentifier(WTF__URL* arg0);
CPP_DECL bWTF__StringView WTF__URL__stringWithoutQueryOrFragmentIdentifier(WTF__URL* arg0);
CPP_DECL bWTF__URL WTF__URL__truncatedForUseAsBase(WTF__URL* arg0);
CPP_DECL bWTF__String WTF__URL__user(WTF__URL* arg0);

#pragma mark - WTF::String

CPP_DECL const uint16_t* WTF__String__characters16(WTF__String* arg0);
CPP_DECL const char* WTF__String__characters8(WTF__String* arg0);
CPP_DECL bWTF__String WTF__String__createFromExternalString(bWTF__ExternalStringImpl arg0);
CPP_DECL bWTF__String WTF__String__createWithoutCopyingFromPtr(const char* arg0, size_t arg1);
CPP_DECL bool WTF__String__eqlSlice(WTF__String* arg0, const char* arg1, size_t arg2);
CPP_DECL bool WTF__String__eqlString(WTF__String* arg0, const WTF__String* arg1);
CPP_DECL const WTF__StringImpl* WTF__String__impl(WTF__String* arg0);
CPP_DECL bool WTF__String__is16Bit(WTF__String* arg0);
CPP_DECL bool WTF__String__is8Bit(WTF__String* arg0);
CPP_DECL bool WTF__String__isEmpty(WTF__String* arg0);
CPP_DECL bool WTF__String__isExternal(WTF__String* arg0);
CPP_DECL bool WTF__String__isStatic(WTF__String* arg0);
CPP_DECL size_t WTF__String__length(WTF__String* arg0);

#pragma mark - JSC::PropertyName

CPP_DECL bool JSC__PropertyName__eqlToIdentifier(JSC__PropertyName* arg0, const JSC__Identifier* arg1);
CPP_DECL bool JSC__PropertyName__eqlToPropertyName(JSC__PropertyName* arg0, const JSC__PropertyName* arg1);
CPP_DECL const WTF__StringImpl* JSC__PropertyName__publicName(JSC__PropertyName* arg0);
CPP_DECL const WTF__StringImpl* JSC__PropertyName__uid(JSC__PropertyName* arg0);

#pragma mark - JSC::Exception

CPP_DECL JSC__Exception* JSC__Exception__create(JSC__JSGlobalObject* arg0, JSC__JSObject* arg1, char StackCaptureAction2);

#pragma mark - JSC::VM

CPP_DECL JSC__JSLock* JSC__VM__apiLock(JSC__VM* arg0);
CPP_DECL JSC__VM* JSC__VM__create(char HeapType0);
CPP_DECL void JSC__VM__deinit(JSC__VM* arg0, JSC__JSGlobalObject* arg1);
CPP_DECL void JSC__VM__drainMicrotasks(JSC__VM* arg0);
CPP_DECL bool JSC__VM__executionForbidden(JSC__VM* arg0);
CPP_DECL bool JSC__VM__isEntered(JSC__VM* arg0);
CPP_DECL void JSC__VM__setExecutionForbidden(JSC__VM* arg0, bool arg1);
CPP_DECL bool JSC__VM__throwError(JSC__VM* arg0, JSC__JSGlobalObject* arg1, JSC__ThrowScope* arg2, const char* arg3, size_t arg4);

#pragma mark - JSC::ThrowScope

CPP_DECL void JSC__ThrowScope__clearException(JSC__ThrowScope* arg0);
CPP_DECL bJSC__ThrowScope JSC__ThrowScope__declare(JSC__VM* arg0, char* arg1, char* arg2, size_t arg3);
CPP_DECL JSC__Exception* JSC__ThrowScope__exception(JSC__ThrowScope* arg0);
CPP_DECL void JSC__ThrowScope__release(JSC__ThrowScope* arg0);

#pragma mark - JSC::CatchScope

CPP_DECL void JSC__CatchScope__clearException(JSC__CatchScope* arg0);
CPP_DECL bJSC__CatchScope JSC__CatchScope__declare(JSC__VM* arg0, char* arg1, char* arg2, size_t arg3);
CPP_DECL JSC__Exception* JSC__CatchScope__exception(JSC__CatchScope* arg0);

#pragma mark - JSC::CallFrame

CPP_DECL JSC__JSValue JSC__CallFrame__argument(const JSC__CallFrame* arg0, uint16_t arg1);
CPP_DECL size_t JSC__CallFrame__argumentsCount(const JSC__CallFrame* arg0);
CPP_DECL JSC__JSObject* JSC__CallFrame__jsCallee(const JSC__CallFrame* arg0);
CPP_DECL JSC__JSValue JSC__CallFrame__newTarget(const JSC__CallFrame* arg0);
CPP_DECL JSC__JSValue JSC__CallFrame__setNewTarget(JSC__CallFrame* arg0, JSC__JSValue JSValue1);
CPP_DECL JSC__JSValue JSC__CallFrame__setThisValue(JSC__CallFrame* arg0, JSC__JSValue JSValue1);
CPP_DECL JSC__JSValue JSC__CallFrame__thisValue(const JSC__CallFrame* arg0);
CPP_DECL JSC__JSValue JSC__CallFrame__uncheckedArgument(const JSC__CallFrame* arg0, uint16_t arg1);

#pragma mark - JSC::Identifier

CPP_DECL void JSC__Identifier__deinit(const JSC__Identifier* arg0);
CPP_DECL bool JSC__Identifier__eqlIdent(const JSC__Identifier* arg0, const JSC__Identifier* arg1);
CPP_DECL bool JSC__Identifier__eqlStringImpl(const JSC__Identifier* arg0, const WTF__StringImpl* arg1);
CPP_DECL bool JSC__Identifier__eqlUTF8(const JSC__Identifier* arg0, const char* arg1, size_t arg2);
CPP_DECL bJSC__Identifier JSC__Identifier__fromSlice(JSC__VM* arg0, const char* arg1, size_t arg2);
CPP_DECL bJSC__Identifier JSC__Identifier__fromString(JSC__VM* arg0, const WTF__String* arg1);
CPP_DECL bJSC__Identifier JSC__Identifier__fromUid(JSC__VM* arg0, const WTF__StringImpl* arg1);
CPP_DECL bool JSC__Identifier__isEmpty(const JSC__Identifier* arg0);
CPP_DECL bool JSC__Identifier__isNull(const JSC__Identifier* arg0);
CPP_DECL bool JSC__Identifier__isPrivateName(const JSC__Identifier* arg0);
CPP_DECL bool JSC__Identifier__isSymbol(const JSC__Identifier* arg0);
CPP_DECL size_t JSC__Identifier__length(const JSC__Identifier* arg0);
CPP_DECL bool JSC__Identifier__neqlIdent(const JSC__Identifier* arg0, const JSC__Identifier* arg1);
CPP_DECL bool JSC__Identifier__neqlStringImpl(const JSC__Identifier* arg0, const WTF__StringImpl* arg1);
CPP_DECL bWTF__String JSC__Identifier__toString(const JSC__Identifier* arg0);

#pragma mark - WTF::StringImpl

CPP_DECL const uint16_t* WTF__StringImpl__characters16(const WTF__StringImpl* arg0);
CPP_DECL const char* WTF__StringImpl__characters8(const WTF__StringImpl* arg0);
CPP_DECL bool WTF__StringImpl__is16Bit(const WTF__StringImpl* arg0);
CPP_DECL bool WTF__StringImpl__is8Bit(const WTF__StringImpl* arg0);
CPP_DECL bool WTF__StringImpl__isEmpty(const WTF__StringImpl* arg0);
CPP_DECL bool WTF__StringImpl__isExternal(const WTF__StringImpl* arg0);
CPP_DECL bool WTF__StringImpl__isStatic(const WTF__StringImpl* arg0);
CPP_DECL size_t WTF__StringImpl__length(const WTF__StringImpl* arg0);

#pragma mark - WTF::ExternalStringImpl

CPP_DECL const uint16_t* WTF__ExternalStringImpl__characters16(const WTF__ExternalStringImpl* arg0);
CPP_DECL const char* WTF__ExternalStringImpl__characters8(const WTF__ExternalStringImpl* arg0);
CPP_DECL bWTF__ExternalStringImpl WTF__ExternalStringImpl__create(const char* arg0, size_t arg1, void (* ArgFn2)(void* arg0, char* arg1, size_t arg2));
CPP_DECL bool WTF__ExternalStringImpl__is16Bit(const WTF__ExternalStringImpl* arg0);
CPP_DECL bool WTF__ExternalStringImpl__is8Bit(const WTF__ExternalStringImpl* arg0);
CPP_DECL bool WTF__ExternalStringImpl__isEmpty(const WTF__ExternalStringImpl* arg0);
CPP_DECL size_t WTF__ExternalStringImpl__length(const WTF__ExternalStringImpl* arg0);

#pragma mark - WTF::StringView

CPP_DECL const uint16_t* WTF__StringView__characters16(const WTF__StringView* arg0);
CPP_DECL const char* WTF__StringView__characters8(const WTF__StringView* arg0);
CPP_DECL bWTF__StringView WTF__StringView__from8Bit(const char* arg0, size_t arg1);
CPP_DECL bool WTF__StringView__is16Bit(const WTF__StringView* arg0);
CPP_DECL bool WTF__StringView__is8Bit(const WTF__StringView* arg0);
CPP_DECL bool WTF__StringView__isEmpty(const WTF__StringView* arg0);
CPP_DECL size_t WTF__StringView__length(const WTF__StringView* arg0);
