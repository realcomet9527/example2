name: bun
on:
  push:
    branches: [main, bun-actions]
    paths:
      - "src/**/*"
      - "test/**/*"
      - "build.zig"
      - "Makefile"
      - "Dockerfile"
  pull_request:
    branches: [main]
    paths:
      - "src/**/*"
      - "test/**/*"
      - "build.zig"
      - "Makefile"
      - "Dockerfile"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TEST_TAG: bun-test'

jobs:
  macos-object-files:
    name: macOS Object
    runs-on: linux-amd64
    strategy:
      matrix:
        include:
          - cpu: sandybridge
            arch: x86_64
            label: bun-obj-darwin-x64-baseline
          - cpu: skylake
            arch: x86_64
            label: bun-obj-darwin-x64
          - cpu: native
            arch: aarch64
            label: bun-obj-darwin-aarch64
    steps:
      - uses: actions/checkout@v3
      - name: Checkout submodules
        run: git -c submodule."src/bun.js/WebKit".update=none submodule update --init --recursive --depth=1 --progress -j $(nproc)
      - uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true
      - name: Run
        run: |
          rm -rf ${{runner.temp}}/release
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: ghcr.io/oven-sh/bun:canary,ghcr.io/oven-sh/bun:${{github.sha}}
          cache-from: type=registry,ref=ghcr.io/oven-sh/bun:buildcache-${{matrix.cpu}}-${{matrix.arch}}-macos
          cache-to: type=registry,ref=ghcr.io/oven-sh/bun:buildcache-${{matrix.cpu}}-${{matrix.arch}}-macos,mode=max
          build-args: |
            ARCH=${{ matrix.arch }}
            BUILDARCH=amd64
            CPU_TARGET=${{ matrix.cpu }}
            TRIPLET=${{matrix.arch}}-macos-none
          platforms: linux/amd64
          target: build_release_obj
          outputs: type=local,dest=${{runner.temp}}/release
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.label }}
          path: ${{runner.temp}}/release/bun.o
  macOS:
    name: macOS
    runs-on: ${{ matrix.runner }}
    # needs: macos-object-files
    timeout-minutes: 90
    strategy:
      matrix:
        include:
          - cpu: sandybridge
            arch: x86_64
            label: bun-darwin-x64-baseline
            obj: bun-obj-darwin-x64-baseline
            runner: macos-11
            artifact: bun-obj-darwin-x64-baseline
            webkit_url: "https://github.com/oven-sh/WebKit/releases/download/latest/bun-webkit-macos-amd64-lto.tar.gz"
          - cpu: skylake
            arch: x86_64
            label: bun-darwin-x64
            obj: bun-obj-darwin-x64
            runner: macos-11
            artifact: bun-obj-darwin-x64
            webkit_url: "https://github.com/oven-sh/WebKit/releases/download/latest/bun-webkit-macos-amd64-lto.tar.gz"
          - cpu: native
            arch: aarch64
            label: bun-darwin-aarch64
            obj: bun-obj-darwin-aarch64
            artifact: bun-obj-darwin-aarch64
            webkit_url: "https://github.com/oven-sh/WebKit/releases/download/latest/bun-webkit-macos-arm64-lto.tar.gz"
            runner: macos-arm64
    steps:
      - uses: actions/checkout@v3
      - name: Checkout submodules
        run: git submodule update --init --recursive --depth=1 --progress -j $(sysctl -n hw.ncpu)
      - name: Install dependencies
        env:
          CPU_TARGET: ${{ matrix.cpu }}
          JSC_BASE_DIR: ${{ runner.temp }}/bun-webkit
          JSC_LIB: ${{ runner.temp }}/bun-webkit/lib
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
          HOMEBREW_NO_AUTO_UPDATE: 1
          BUN_DEPLOY_DIR: ${{ runner.temp }}/release/bun
        run: |
          brew install rust llvm@13 pkg-config coreutils libtool go cmake libiconv automake openssl@1.1 ninja gnu-sed pkg-config esbuild --force
          echo "export PATH=$(brew --prefix coreutils)/libexec/gnubin:\$PATH" >> $GITHUB_ENV
          echo "export PATH=$(brew --prefix llvm@13)/bin:\$PATH" >> $GITHUB_ENV
          brew link --overwrite llvm@13
      - name: Download WebKit
        env:
          CPU_TARGET: ${{ matrix.cpu }}
          JSC_BASE_DIR: ${{ runner.temp }}/bun-webkit
          JSC_LIB: ${{ runner.temp }}/bun-webkit/lib
          BUN_DEPLOY_DIR: ${{ runner.temp }}/release/bun
        run: |
          rm -rf $JSC_BASE_DIR
          mkdir -p $JSC_BASE_DIR
          curl -L ${{ matrix.webkit_url }} | tar -xz -C $JSC_BASE_DIR --strip-components=1
      - name: Compile dependencies
        env:
          CPU_TARGET: ${{ matrix.cpu }}
          JSC_BASE_DIR: ${{ runner.temp }}/bun-webkit
          JSC_LIB: ${{ runner.temp }}/bun-webkit/lib
          BUN_DEPLOY_DIR: ${{ runner.temp }}/release/bun
        run: |
          make vendor-without-check
      - name: Compile C++
        env:
          CPU_TARGET: ${{ matrix.cpu }}
          JSC_BASE_DIR: ${{ runner.temp }}/bun-webkit
          JSC_LIB: ${{ runner.temp }}/bun-webkit/lib
          BUN_DEPLOY_DIR: ${{ runner.temp }}/release/bun
        run: |
          rm -rf src/bun.js/bindings-obj
          mkdir -p src/bun.js/bindings-obj
          make -j $(sysctl -n hw.ncpu) jsc-bindings-mac
      # - name: Download Artifact
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: ${{ matrix.artifact }}
      #     path: ${{ runner.temp }}/release
      - name: Link
        env:
          CPU_TARGET: ${{ matrix.cpu }}
          JSC_BASE_DIR: ${{ runner.temp }}/bun-webkit
          JSC_LIB: ${{ runner.temp }}/bun-webkit/lib
          BUN_DEPLOY_DIR: ${{ runner.temp }}/release/bun
        run: make bun-link-lld-release
      - name: dSYM
        env:
          CPU_TARGET: ${{ matrix.cpu }}
          JSC_BASE_DIR: ${{ runner.temp }}/bun-webkit
          JSC_LIB: ${{ runner.temp }}/bun-webkit/lib
          BUN_DEPLOY_DIR: ${{ runner.temp }}/release/bun
        run: |
          make bun-link-lld-release-dsym
      - name: Copy release
        env:
          CPU_TARGET: ${{ matrix.cpu }}
          JSC_BASE_DIR: ${{ runner.temp }}/bun-webkit
          JSC_LIB: ${{ runner.temp }}/bun-webkit/lib
          BUN_DEPLOY_DIR: ${{ runner.temp }}/release/bun
        run: |
          mkdir -p $BUN_DEPLOY_DIR
          make release-bin-generate-copy
      - name: Upload release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.label }}
          path: ${{ runner.temp }}/release/bun

  linux-x64:
    name: Linux x64 (${{ matrix.cpu }})
    runs-on: linux-amd64
    timeout-minutes: 90
    strategy:
      matrix:
        cpu: [native, sandybridge]

    steps:
      - uses: actions/checkout@v3
      - name: Checkout submodules
        run: git -c submodule."src/bun.js/WebKit".update=none submodule update --init --recursive --depth=1 --progress -j $(nproc)
      - uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true
      - name: Run
        run: |
          rm -rf ${{runner.temp}}/release
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: ghcr.io/oven-sh/bun:canary,ghcr.io/oven-sh/bun:${{github.sha}}
          cache-from: type=registry,ref=ghcr.io/oven-sh/bun:buildcache-${{matrix.cpu}}-amd64
          cache-to: type=registry,ref=ghcr.io/oven-sh/bun:buildcache-${{matrix.cpu}}-amd64,mode=max
          build-args: |
            ARCH=x86_64
            BUILDARCH=amd64
            CPU_TARGET=${{matrix.cpu}}
          platforms: linux/amd64
          target: artifact
          outputs: type=local,dest=${{runner.temp}}/release
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.cpu == 'native' }}
        with:
          name: bun-linux-x64
          path: ${{runner.temp}}/release/bun
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.cpu == 'sandybridge' }}
        with:
          name: bun-linux-x64-baseline
          path: ${{runner.temp}}/release/bun
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.cpu == 'native' }}
        with:
          name: bun-dependencies-linux-x64
          path: ${{runner.temp}}/release/bun-dependencies
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.cpu == 'sandybridge' }}
        with:
          name: bun-dependencies-linux-x64-baseline
          path: ${{runner.temp}}/release/bun-dependencies
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.cpu == 'native' }}
        with:
          name: bun-linux-x64-profile
          path: ${{runner.temp}}/release/bun-profile
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.cpu == 'sandybridge' }}
        with:
          name: bun-linux-x64-baseline-profile
          path: ${{runner.temp}}/release/bun-profile
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.cpu == 'native' }}
        with:
          name: bun-obj-linux-x64
          path: ${{runner.temp}}/release/bun-obj
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.cpu == 'sandybridge' }}
        with:
          name: bun-obj-linux-x64-baseline
          path: ${{runner.temp}}/release/bun-obj
  linux-aarch64:
    name: Linux aarch64
    runs-on: linux-arm64
    timeout-minutes: 90
    steps:
      - uses: actions/checkout@v3
      - name: Checkout submodules
        run: git -c submodule."src/bun.js/WebKit".update=none submodule update --init --recursive --depth=1 --progress -j $(nproc)
      - uses: docker/setup-buildx-action@v2
        id: buildx
        with:
          install: true
      - name: Run
        run: |
          rm -rf ${{runner.temp}}/release
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          tags: ghcr.io/oven-sh/bun:canary,ghcr.io/oven-sh/bun:${{github.sha}}
          push: false
          cache-from: type=registry,ref=ghcr.io/oven-sh/bun:buildcache-aarch64
          cache-to: type=registry,ref=ghcr.io/oven-sh/bun:buildcache-aarch64,mode=max
          build-args: |
            ARCH=aarch64
            BUILDARCH=arm64
            CPU_TARGET=native
          platforms: linux/arm64
          target: artifact
          outputs: type=local,dest=${{runner.temp}}/release
      - uses: actions/upload-artifact@v3
        with:
          name: bun-linux-aarch64
          path: ${{runner.temp}}/release/bun
      - uses: actions/upload-artifact@v3
        with:
          name: bun-dependencies-linux-aarch64
          path: ${{runner.temp}}/release/bun-dependencies
      - uses: actions/upload-artifact@v3
        with:
          name: bun-linux-aarch64-profile
          path: ${{runner.temp}}/release/bun-profile
      - uses: actions/upload-artifact@v3
        with:
          name: bun-obj-linux-aarch64
          path: ${{runner.temp}}/release/bun-obj

  release:
    name: release
    runs-on: ubuntu-18.04
    timeout-minutes: 90
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged) || github.event_name == 'workflow_dispatch'
    needs:
      - linux-x64
      - linux-aarch64
      - macOS
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: ${{runner.temp}}/release
      - name: Rename files
        run: |
          cd ${{runner.temp}}/release

          chmod +x bun-linux-x64/*
          chmod +x bun-linux-x64-baseline/*
          chmod +x bun-linux-x64-profile/*
          chmod +x bun-linux-x64-baseline-profile/*
          chmod +x bun-linux-aarch64/*
          chmod +x bun-linux-aarch64-profile/*

          zip -r bun-linux-x64.zip bun-linux-x64
          zip -r bun-linux-x64-baseline.zip bun-linux-x64-baseline
          zip -r bun-linux-x64-profile.zip bun-linux-x64-profile
          zip -r bun-linux-x64-baseline-profile.zip bun-linux-x64-baseline-profile
          zip -r bun-linux-aarch64.zip bun-linux-aarch64
          zip -r bun-linux-aarch64-profile.zip bun-linux-aarch64-profile

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          generate_release_notes: true
          body: "This is the canary release of Bun that corresponds to the commit [${{ github.sha }}]"
          name: "Canary (${{github.sha}})"
          tag_name: "canary"
          files: |
            ${{runner.temp}}/release/*.zip
